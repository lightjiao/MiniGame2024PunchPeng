//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/PlayerInput/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PunchPeng
{
    public partial class @PlayerInputActionGen: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActionGen()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""37c004ff-a551-4d07-b0e2-d24e5eee5d55"",
            ""actions"": [
                {
                    ""name"": ""KeyboardHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""fa16905a-5728-4c26-b19a-a5fa98e5e407"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyboardVerticle"",
                    ""type"": ""Value"",
                    ""id"": ""7f3770c7-2307-42ff-a956-cfa0ddcf736e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GamePadMove"",
                    ""type"": ""Value"",
                    ""id"": ""a20aaf2b-45ae-4205-a35a-4f2f79c2307c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""8bb03f04-a2e8-4e87-8dda-7d4288a95dca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""1622cfca-5cac-4386-9659-dedd9e35a345"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""2b084e94-bf31-4642-bc27-3704f043c43a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""449e7a46-4bd7-4772-afa5-c12942062b24"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""056242fd-909d-4f61-b697-7b6d147aa9e6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8a376521-d1aa-475e-b793-41a98a2fcb3c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GamePadMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0efebc71-bfa0-41e3-a05c-5059eb2f85bd"",
                    ""path"": ""<HID::8BitDo 8BitDo Ultimate wireless Controller for PC>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GamePadMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c2567cd-d2d2-4794-ad5a-d49ded84830b"",
                    ""path"": ""<HID::8BitDo 8BitDo Ultimate wireless Controller for PC>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3edeac0b-5d9a-4df3-a39f-29d1af5475fb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8725919a-6a99-4f9d-a7cc-689e62220855"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf5e94e1-8433-4993-909d-b4f1b55e79c4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbbaa51a-f621-449c-8ce2-be575d8f86c4"",
                    ""path"": ""<HID::8BitDo 8BitDo Ultimate wireless Controller for PC>/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f84c77b5-0b9d-4c03-919e-a7a8ee92eed8"",
                    ""path"": ""<HID::8BitDo 8BitDo Ultimate wireless Controller for PC>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""UpDown"",
                    ""id"": ""959f9663-b762-47b3-a3c0-4acb3cf7cef8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardVerticle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1afafd9a-cb2b-41b6-a7b1-782a35cb9454"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardVerticle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8145d3b5-90e6-4ec3-9ce9-a2d503ec748a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardVerticle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""526a7e6b-098f-4bbe-95e4-6e32936a3c91"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f33acd4-c1af-4cec-9707-385260179b9b"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""手柄和键盘"",
            ""bindingGroup"": ""手柄和键盘"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // GamePlay
            m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
            m_GamePlay_KeyboardHorizontal = m_GamePlay.FindAction("KeyboardHorizontal", throwIfNotFound: true);
            m_GamePlay_KeyboardVerticle = m_GamePlay.FindAction("KeyboardVerticle", throwIfNotFound: true);
            m_GamePlay_GamePadMove = m_GamePlay.FindAction("GamePadMove", throwIfNotFound: true);
            m_GamePlay_Attack = m_GamePlay.FindAction("Attack", throwIfNotFound: true);
            m_GamePlay_Run = m_GamePlay.FindAction("Run", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GamePlay
        private readonly InputActionMap m_GamePlay;
        private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
        private readonly InputAction m_GamePlay_KeyboardHorizontal;
        private readonly InputAction m_GamePlay_KeyboardVerticle;
        private readonly InputAction m_GamePlay_GamePadMove;
        private readonly InputAction m_GamePlay_Attack;
        private readonly InputAction m_GamePlay_Run;
        public struct GamePlayActions
        {
            private @PlayerInputActionGen m_Wrapper;
            public GamePlayActions(@PlayerInputActionGen wrapper) { m_Wrapper = wrapper; }
            public InputAction @KeyboardHorizontal => m_Wrapper.m_GamePlay_KeyboardHorizontal;
            public InputAction @KeyboardVerticle => m_Wrapper.m_GamePlay_KeyboardVerticle;
            public InputAction @GamePadMove => m_Wrapper.m_GamePlay_GamePadMove;
            public InputAction @Attack => m_Wrapper.m_GamePlay_Attack;
            public InputAction @Run => m_Wrapper.m_GamePlay_Run;
            public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
            public void AddCallbacks(IGamePlayActions instance)
            {
                if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
                @KeyboardHorizontal.started += instance.OnKeyboardHorizontal;
                @KeyboardHorizontal.performed += instance.OnKeyboardHorizontal;
                @KeyboardHorizontal.canceled += instance.OnKeyboardHorizontal;
                @KeyboardVerticle.started += instance.OnKeyboardVerticle;
                @KeyboardVerticle.performed += instance.OnKeyboardVerticle;
                @KeyboardVerticle.canceled += instance.OnKeyboardVerticle;
                @GamePadMove.started += instance.OnGamePadMove;
                @GamePadMove.performed += instance.OnGamePadMove;
                @GamePadMove.canceled += instance.OnGamePadMove;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }

            private void UnregisterCallbacks(IGamePlayActions instance)
            {
                @KeyboardHorizontal.started -= instance.OnKeyboardHorizontal;
                @KeyboardHorizontal.performed -= instance.OnKeyboardHorizontal;
                @KeyboardHorizontal.canceled -= instance.OnKeyboardHorizontal;
                @KeyboardVerticle.started -= instance.OnKeyboardVerticle;
                @KeyboardVerticle.performed -= instance.OnKeyboardVerticle;
                @KeyboardVerticle.canceled -= instance.OnKeyboardVerticle;
                @GamePadMove.started -= instance.OnGamePadMove;
                @GamePadMove.performed -= instance.OnGamePadMove;
                @GamePadMove.canceled -= instance.OnGamePadMove;
                @Attack.started -= instance.OnAttack;
                @Attack.performed -= instance.OnAttack;
                @Attack.canceled -= instance.OnAttack;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
            }

            public void RemoveCallbacks(IGamePlayActions instance)
            {
                if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGamePlayActions instance)
            {
                foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GamePlayActions @GamePlay => new GamePlayActions(this);
        private int m_手柄和键盘SchemeIndex = -1;
        public InputControlScheme 手柄和键盘Scheme
        {
            get
            {
                if (m_手柄和键盘SchemeIndex == -1) m_手柄和键盘SchemeIndex = asset.FindControlSchemeIndex("手柄和键盘");
                return asset.controlSchemes[m_手柄和键盘SchemeIndex];
            }
        }
        public interface IGamePlayActions
        {
            void OnKeyboardHorizontal(InputAction.CallbackContext context);
            void OnKeyboardVerticle(InputAction.CallbackContext context);
            void OnGamePadMove(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
        }
    }
}
