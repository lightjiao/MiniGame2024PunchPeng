//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PunchPeng
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""37c004ff-a551-4d07-b0e2-d24e5eee5d55"",
            ""actions"": [
                {
                    ""name"": ""Player1Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""fa16905a-5728-4c26-b19a-a5fa98e5e407"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player1Verticle"",
                    ""type"": ""Value"",
                    ""id"": ""7f3770c7-2307-42ff-a956-cfa0ddcf736e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player1Attack"",
                    ""type"": ""Button"",
                    ""id"": ""f698dff1-64fb-416a-bbaa-ad60f3a540b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player1Run"",
                    ""type"": ""Button"",
                    ""id"": ""51e861a6-b413-4048-a80d-33f064a353f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player2Move"",
                    ""type"": ""Value"",
                    ""id"": ""a20aaf2b-45ae-4205-a35a-4f2f79c2307c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player2Attack"",
                    ""type"": ""Button"",
                    ""id"": ""8bb03f04-a2e8-4e87-8dda-7d4288a95dca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player2Run"",
                    ""type"": ""Button"",
                    ""id"": ""1622cfca-5cac-4386-9659-dedd9e35a345"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""2b084e94-bf31-4642-bc27-3704f043c43a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""449e7a46-4bd7-4772-afa5-c12942062b24"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""056242fd-909d-4f61-b697-7b6d147aa9e6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""526a7e6b-098f-4bbe-95e4-6e32936a3c91"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f33acd4-c1af-4cec-9707-385260179b9b"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a376521-d1aa-475e-b793-41a98a2fcb3c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b5be685-c351-4ab0-8de9-2cd02ebb7065"",
                    ""path"": ""<HID::8BitDo 8BitDo Ultimate wireless Controller for PC>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3edeac0b-5d9a-4df3-a39f-29d1af5475fb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3393eb54-b56d-4fea-b2c1-096e69bd5ca7"",
                    ""path"": ""<HID::8BitDo 8BitDo Ultimate wireless Controller for PC>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0107e898-b470-4672-9b35-96b3bd628df2"",
                    ""path"": ""<HID::8BitDo 8BitDo Ultimate wireless Controller for PC>/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8725919a-6a99-4f9d-a7cc-689e62220855"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf5e94e1-8433-4993-909d-b4f1b55e79c4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""UpDown"",
                    ""id"": ""959f9663-b762-47b3-a3c0-4acb3cf7cef8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Verticle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1afafd9a-cb2b-41b6-a7b1-782a35cb9454"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Verticle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8145d3b5-90e6-4ec3-9ce9-a2d503ec748a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Verticle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GamePlay
            m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
            m_GamePlay_Player1Horizontal = m_GamePlay.FindAction("Player1Horizontal", throwIfNotFound: true);
            m_GamePlay_Player1Verticle = m_GamePlay.FindAction("Player1Verticle", throwIfNotFound: true);
            m_GamePlay_Player1Attack = m_GamePlay.FindAction("Player1Attack", throwIfNotFound: true);
            m_GamePlay_Player1Run = m_GamePlay.FindAction("Player1Run", throwIfNotFound: true);
            m_GamePlay_Player2Move = m_GamePlay.FindAction("Player2Move", throwIfNotFound: true);
            m_GamePlay_Player2Attack = m_GamePlay.FindAction("Player2Attack", throwIfNotFound: true);
            m_GamePlay_Player2Run = m_GamePlay.FindAction("Player2Run", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GamePlay
        private readonly InputActionMap m_GamePlay;
        private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
        private readonly InputAction m_GamePlay_Player1Horizontal;
        private readonly InputAction m_GamePlay_Player1Verticle;
        private readonly InputAction m_GamePlay_Player1Attack;
        private readonly InputAction m_GamePlay_Player1Run;
        private readonly InputAction m_GamePlay_Player2Move;
        private readonly InputAction m_GamePlay_Player2Attack;
        private readonly InputAction m_GamePlay_Player2Run;
        public struct GamePlayActions
        {
            private @PlayerControls m_Wrapper;
            public GamePlayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Player1Horizontal => m_Wrapper.m_GamePlay_Player1Horizontal;
            public InputAction @Player1Verticle => m_Wrapper.m_GamePlay_Player1Verticle;
            public InputAction @Player1Attack => m_Wrapper.m_GamePlay_Player1Attack;
            public InputAction @Player1Run => m_Wrapper.m_GamePlay_Player1Run;
            public InputAction @Player2Move => m_Wrapper.m_GamePlay_Player2Move;
            public InputAction @Player2Attack => m_Wrapper.m_GamePlay_Player2Attack;
            public InputAction @Player2Run => m_Wrapper.m_GamePlay_Player2Run;
            public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
            public void AddCallbacks(IGamePlayActions instance)
            {
                if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
                @Player1Horizontal.started += instance.OnPlayer1Horizontal;
                @Player1Horizontal.performed += instance.OnPlayer1Horizontal;
                @Player1Horizontal.canceled += instance.OnPlayer1Horizontal;
                @Player1Verticle.started += instance.OnPlayer1Verticle;
                @Player1Verticle.performed += instance.OnPlayer1Verticle;
                @Player1Verticle.canceled += instance.OnPlayer1Verticle;
                @Player1Attack.started += instance.OnPlayer1Attack;
                @Player1Attack.performed += instance.OnPlayer1Attack;
                @Player1Attack.canceled += instance.OnPlayer1Attack;
                @Player1Run.started += instance.OnPlayer1Run;
                @Player1Run.performed += instance.OnPlayer1Run;
                @Player1Run.canceled += instance.OnPlayer1Run;
                @Player2Move.started += instance.OnPlayer2Move;
                @Player2Move.performed += instance.OnPlayer2Move;
                @Player2Move.canceled += instance.OnPlayer2Move;
                @Player2Attack.started += instance.OnPlayer2Attack;
                @Player2Attack.performed += instance.OnPlayer2Attack;
                @Player2Attack.canceled += instance.OnPlayer2Attack;
                @Player2Run.started += instance.OnPlayer2Run;
                @Player2Run.performed += instance.OnPlayer2Run;
                @Player2Run.canceled += instance.OnPlayer2Run;
            }

            private void UnregisterCallbacks(IGamePlayActions instance)
            {
                @Player1Horizontal.started -= instance.OnPlayer1Horizontal;
                @Player1Horizontal.performed -= instance.OnPlayer1Horizontal;
                @Player1Horizontal.canceled -= instance.OnPlayer1Horizontal;
                @Player1Verticle.started -= instance.OnPlayer1Verticle;
                @Player1Verticle.performed -= instance.OnPlayer1Verticle;
                @Player1Verticle.canceled -= instance.OnPlayer1Verticle;
                @Player1Attack.started -= instance.OnPlayer1Attack;
                @Player1Attack.performed -= instance.OnPlayer1Attack;
                @Player1Attack.canceled -= instance.OnPlayer1Attack;
                @Player1Run.started -= instance.OnPlayer1Run;
                @Player1Run.performed -= instance.OnPlayer1Run;
                @Player1Run.canceled -= instance.OnPlayer1Run;
                @Player2Move.started -= instance.OnPlayer2Move;
                @Player2Move.performed -= instance.OnPlayer2Move;
                @Player2Move.canceled -= instance.OnPlayer2Move;
                @Player2Attack.started -= instance.OnPlayer2Attack;
                @Player2Attack.performed -= instance.OnPlayer2Attack;
                @Player2Attack.canceled -= instance.OnPlayer2Attack;
                @Player2Run.started -= instance.OnPlayer2Run;
                @Player2Run.performed -= instance.OnPlayer2Run;
                @Player2Run.canceled -= instance.OnPlayer2Run;
            }

            public void RemoveCallbacks(IGamePlayActions instance)
            {
                if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGamePlayActions instance)
            {
                foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GamePlayActions @GamePlay => new GamePlayActions(this);
        public interface IGamePlayActions
        {
            void OnPlayer1Horizontal(InputAction.CallbackContext context);
            void OnPlayer1Verticle(InputAction.CallbackContext context);
            void OnPlayer1Attack(InputAction.CallbackContext context);
            void OnPlayer1Run(InputAction.CallbackContext context);
            void OnPlayer2Move(InputAction.CallbackContext context);
            void OnPlayer2Attack(InputAction.CallbackContext context);
            void OnPlayer2Run(InputAction.CallbackContext context);
        }
    }
}
